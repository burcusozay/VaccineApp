// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VaccineApp.Data.Context;

#nullable disable

namespace VaccineApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VaccineApp.Data.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("character varying");

                    b.Property<string>("ActionName")
                        .HasColumnType("text");

                    b.Property<string>("Changes")
                        .HasColumnType("character varying");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("character varying");

                    b.Property<string>("Route")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("AuditLogs_pk");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.Freezer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Freezers_pk");

                    b.ToTable("Freezers");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.FreezerStock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StockCount")
                        .HasColumnType("integer");

                    b.Property<long>("VaccineFreezerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("FreezerStock_pk");

                    b.HasIndex("VaccineFreezerId");

                    b.ToTable("FreezerStock", (string)null);
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.FreezerTemprature", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FreezerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Temprature")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("id")
                        .HasName("FreezerTempratures_pk");

                    b.HasIndex("FreezerId");

                    b.ToTable("FreezerTempratures");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("character varying");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("RefreshToken_pk");

                    b.HasIndex("UserId1");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Users_pk");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.Vaccine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Vaccines_pk");

                    b.HasIndex(new[] { "Id" }, "VaccinesId_idx");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.VaccineFreezer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("FreezerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("VaccineFreezers_pk");

                    b.HasIndex("FreezerId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineFreezers");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.VaccineOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FreezerStockId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("VaccineOrderCount")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("VaccineOrders_pk");

                    b.HasIndex("FreezerStockId");

                    b.HasIndex("UserId");

                    b.ToTable("VaccineOrders");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.FreezerStock", b =>
                {
                    b.HasOne("VaccineApp.Data.Entities.VaccineFreezer", "VaccineFreezer")
                        .WithMany("FreezerStocks")
                        .HasForeignKey("VaccineFreezerId")
                        .IsRequired()
                        .HasConstraintName("FreezerStockVaccine_Freezers_fk");

                    b.Navigation("VaccineFreezer");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.FreezerTemprature", b =>
                {
                    b.HasOne("VaccineApp.Data.Entities.Freezer", "Freezer")
                        .WithMany("FreezerTempratures")
                        .HasForeignKey("FreezerId")
                        .IsRequired()
                        .HasConstraintName("FreezerTempraturesFreezers_fk");

                    b.Navigation("Freezer");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("VaccineApp.Data.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.VaccineFreezer", b =>
                {
                    b.HasOne("VaccineApp.Data.Entities.Freezer", "Freezer")
                        .WithMany("VaccineFreezers")
                        .HasForeignKey("FreezerId")
                        .IsRequired()
                        .HasConstraintName("VaccineFreezers_Freezers_fk");

                    b.HasOne("VaccineApp.Data.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineFreezers")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("VaccineFreezers_Vaccines_fk");

                    b.Navigation("Freezer");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.VaccineOrder", b =>
                {
                    b.HasOne("VaccineApp.Data.Entities.FreezerStock", "FreezerStock")
                        .WithMany("VaccineOrders")
                        .HasForeignKey("FreezerStockId")
                        .IsRequired()
                        .HasConstraintName("VaccineOrders_FreezerStock_fk");

                    b.HasOne("VaccineApp.Data.Entities.User", "User")
                        .WithMany("VaccineOrders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("VaccineOrders_Users_fk");

                    b.Navigation("FreezerStock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.Freezer", b =>
                {
                    b.Navigation("FreezerTempratures");

                    b.Navigation("VaccineFreezers");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.FreezerStock", b =>
                {
                    b.Navigation("VaccineOrders");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("VaccineOrders");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.Vaccine", b =>
                {
                    b.Navigation("VaccineFreezers");
                });

            modelBuilder.Entity("VaccineApp.Data.Entities.VaccineFreezer", b =>
                {
                    b.Navigation("FreezerStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
